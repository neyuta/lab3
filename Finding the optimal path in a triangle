#include <iostream>
#include <vector>

using namespace std;

void findOptimalPath(const vector<vector<int>>& triangle, int& maxSum, vector<int>& path) {
    int n = triangle.size();

    vector<vector<int>> dp(n, vector<int>(n));

    for (int i = 0; i < n; i++) {
        dp[n - 1][i] = triangle[n - 1][i];
    }

    for (int i = n - 2; i >= 0; i--) {
        for (int j = 0; j <= i; j++) {
            dp[i][j] = triangle[i][j] + max(dp[i + 1][j], dp[i + 1][j + 1]);
        }
    }

    maxSum = dp[0][0];

    int currSum = maxSum;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j <= i; j++) {
            if (triangle[i][j] + dp[i + 1][j] == currSum) {
                path.push_back(triangle[i][j]);
                currSum -= triangle[i][j];
                break;
            }
            else if (triangle[i][j] + dp[i + 1][j + 1] == currSum) {
                path.push_back(triangle[i][j]);
                currSum -= triangle[i][j];
                break;
            }
        }
    }

    path.push_back(triangle[n - 1][0]);

    reverse(path.begin(), path.end());
}

int main() {
    vector<vector<int>> triangle = {
        {7},
        {3, 8},
        {8, 1, 0},
        {2, 7, 4, 4},
        {4, 5, 2, 6, 5}
    };

    int maxSum;
    vector<int> path;

    findOptimalPath(triangle, maxSum, path);

    cout << "maximum amount of loads: " << maxSum << endl;

    cout << "way: ";
    for (int i = 0; i < path.size(); i++) {
        cout << path[i];
        if (i != path.size() - 1) {
            cout << " -> ";
        }
    }
    cout << endl;

    return 0;
}
