#include <iostream>
#include <string>
#include <vector>

using namespace std;

string findLongestCommonSubsequence(const string& s1, const string& s2) {
    int m = s1.length();
    int n = s2.length();

    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    for (int i = m - 1; i >= 0; i--) {
        for (int j = n - 1; j >= 0; j--) {
            if (s1[i] == s2[j]) {
                dp[i][j] = dp[i + 1][j + 1] + 1;
            }
            else {
                dp[i][j] = std::max(dp[i + 1][j], dp[i][j + 1]);
            }
        }
    }

    string result;
    int i = 0, j = 0;
    while (i < m && j < n) {
        if (s1[i] == s2[j]) {
            result += s1[i];
            i++;
            j++;
        }
        else if (dp[i + 1][j] >= dp[i][j + 1]) {
            i++;
        }
        else {
            j++;
        }
    }

    return result;
}

int main() {
    string s1, s2;
    cout << "Enter the first string of characters: ";
    getline(cin, s1);
    cout << "Enter the second string of characters: ";
    getline(cin, s2);

    string longestCommonSubsequence = findLongestCommonSubsequence(s1, s2);
    cout << "Maximum matching sub-chain: " << longestCommonSubsequence << endl;

    return 0;
}
